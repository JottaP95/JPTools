import time
import threading
import win32gui
import win32api
import win32con
import win32process
import tkinter as tk
from tkinter import ttk, messagebox, font
import keyboard
import signal
import sys
import os
import winsound
import pymem
import struct
from PIL import Image, ImageTk

# --- CONFIGURAÇÕES E CONSTANTES ---
PROCESS_NAME = 'Ragexe.exe'
ICON_FOLDER = 'icons' # Pasta para os ícones ao lado do script

# --- ENDEREÇOS DE MEMÓRIA ---
HP_ADDRESS = 0x14A2A54
MAX_HP_ADDRESS = 0x14A2A58
BUFF_LIST_ADDRESS = HP_ADDRESS + 0x474
BUFF_LIST_SIZE = 80
# Endereço de status do chat que você encontrou
CHAT_STATUS_ADDRESS = 0x011C124C

# --- CONFIGURAÇÕES DE DELAY E MOUSE (em segundos) ---
FLICK_DISTANCE = 5
MOUSE_FLICK_SPEED = 0.01
AUTOPOT_DELAY = 0.3
AUTOPOT_CHECK_INTERVAL = 0.1
AUTBUFF_COOLDOWN = 0.5
AUTBUFF_CHECK_INTERVAL = 0.5
SKILLSPAM_DELAY = 0.01
# Intervalo para a nova thread de monitoramento do jogo
GAME_MONITOR_INTERVAL = 0.25
# Cooldown para a tecla de toggle do loop
LOOP_TOGGLE_DEBOUNCE = 0.3


# --- CONFIGURAÇÃO DA LISTA DE BUFFS ---
BUFF_CONFIG = {
    "Espadachim Skills": [
        {'id': 1,   'name': 'Vigor',      'icon': 'SM_ENDURE.png',         'key': ''},
        {'id': 104, 'name': 'Aparar',     'icon': 'LK_PARRYING.png',       'key': ''},
        {'id': 2,   'name': 'Rapidez',    'icon': 'KN_TWOHANDQUICKEN.png', 'key': ''},
        {'id': 105, 'name': 'Dedicação',  'icon': 'LK_CONCENTRATION.png',  'key': ''},
        {'id': 103, 'name': 'Aura',       'icon': 'LK_AURABLADE.png',      'key': ''},
        {'id': 316, 'name': 'Lâmina',     'icon': 'ENCHANTBLADE.png',      'key': ''},
    ],
    "Outra Classe Skills": []
}


# --- FUNÇÕES DE INTERAÇÃO COM O JOGO (SEM ALTERAÇÕES) ---
def send_message(hwnd, msg, wparam, lparam, flags=win32con.SMTO_ABORTIFHUNG, timeout=5000):
    return win32gui.SendMessageTimeout(hwnd, msg, wparam, lparam, flags, timeout)

def send_key(hwnd, key: str) -> None:
    try:
        if key.upper().startswith('F') and len(key) > 1 and key[1:].isdigit():
            vk_code = 0x70 + int(key[1:]) - 1
        else:
            vk_code = win32api.VkKeyScan(key.upper()) & 0xFF
        
        scan_code = win32api.MapVirtualKey(vk_code, 0)
        lparam_down = (scan_code << 16) | 1
        lparam_up = (1 << 31) | (1 << 30) | (scan_code << 16) | 1
        
        send_message(hwnd, win32con.WM_KEYDOWN, vk_code, lparam_down)
        time.sleep(0.02)
        send_message(hwnd, win32con.WM_KEYUP, vk_code, lparam_up)
    except Exception as e:
        print(f"[ERRO] Falha ao enviar tecla '{key}': {e}")

def send_click(hwnd, coords=None) -> None:
    try:
        if coords:
            lparam = win32api.MAKELONG(coords[0], coords[1])
        else:
            screen_pos = win32gui.GetCursorPos()
            client_pos = win32gui.ScreenToClient(hwnd, screen_pos)
            lparam = win32api.MAKELONG(client_pos[0], client_pos[1])
        
        send_message(hwnd, win32con.WM_LBUTTONDOWN, win32con.MK_LBUTTON, lparam)
        time.sleep(0.02)
        send_message(hwnd, win32con.WM_LBUTTONUP, 0, lparam)
    except Exception as e:
        print(f"[ERRO] Falha ao enviar clique: {e}")

def get_hwnd_from_pid(pid):
    hwnds = []
    def enum_windows_proc(hwnd, lParam):
        if win32gui.IsWindowVisible(hwnd) and win32gui.GetParent(hwnd) == 0:
            _, window_pid = win32process.GetWindowThreadProcessId(hwnd)
            if window_pid == pid:
                hwnds.append(hwnd)
        return True
    win32gui.EnumWindows(enum_windows_proc, None)
    return hwnds[0] if hwnds else None

# --- JANELA POPUP PARA CAPTURAR TECLA (SEM ALTERAÇÕES) ---
class KeyCapturePopup(tk.Toplevel):
    def __init__(self, parent, callback):
        super().__init__(parent)
        self.callback = callback
        self.title("Definir Atalho")
        self.geometry("250x100")
        self.configure(bg="#D7D7D7")
        
        parent_x, parent_y = parent.winfo_x(), parent.winfo_y()
        parent_width, parent_height = parent.winfo_width(), parent.winfo_height()
        self.geometry(f"+{parent_x + (parent_width // 2) - 125}+{parent_y + (parent_height // 2) - 50}")

        self.label = ttk.Label(self, text="Pressione uma tecla...\n(ESC para limpar o atalho)", font=("Segoe UI", 10), justify="center")
        self.label.pack(expand=True, fill="both", padx=10, pady=10)

        self.transient(parent)
        self.grab_set()
        self.focus_force()
        self.bind("<KeyPress>", self.on_key_press)
        self.bind("<Escape>", self.on_escape)

    def on_key_press(self, event):
        if event.keysym in ('Shift_L', 'Shift_R', 'Control_L', 'Control_R', 'Alt_L', 'Alt_R', 'Escape'):
            return
        key_name = event.keysym
        if 'KP_' in key_name: key_name = key_name.replace('KP_', 'NUM')
        self.callback(key_name.upper())
        self.destroy()

    def on_escape(self, event):
        self.callback("")
        self.destroy()

# --- CLASSES DAS THREADS DE AUTOMAÇÃO ---

class GameMonitor(threading.Thread):
    def __init__(self, pm, app_instance):
        super().__init__(daemon=True)
        self.pm = pm
        self.app = app_instance
        self.running = threading.Event()

    def run(self):
        self.running.set()
        print("Thread de GameMonitor iniciada.")
        while self.running.is_set():
            try:
                # --- CORRIGIDO --- Usa read_bytes para ler 1 byte e pega o primeiro elemento.
                chat_status = self.pm.read_bytes(CHAT_STATUS_ADDRESS, 1)[0]
                is_chat_active = (chat_status != 0) # Pausa se o valor for qualquer coisa diferente de 0
                self.app.set_paused_state(is_chat_active)
            except (pymem.exception.MemoryReadError, pymem.exception.ProcessNotFound):
                print("[AVISO] Não foi possível ler o status do chat. Pausando por segurança.")
                self.app.set_paused_state(True)
            except IndexError:
                print("[AVISO] Falha ao ler o byte do endereço de chat. Pausando por segurança.")
                self.app.set_paused_state(True)

            time.sleep(GAME_MONITOR_INTERVAL)
        print("Thread de GameMonitor parada.")

    def stop(self):
        self.running.clear()
        
class AutoPot(threading.Thread):
    def __init__(self, pm, hwnd, use_key, threshold_percent, status_callback, resume_event):
        super().__init__(daemon=True)
        self.pm, self.hwnd = pm, hwnd
        self.use_key = use_key
        self.threshold = threshold_percent / 100.0
        self.status_callback = status_callback
        self.running = threading.Event()
        self.resume_event = resume_event

    def run(self):
        self.running.set()
        print("Thread de AutoPot iniciada.")
        while self.running.is_set():
            self.resume_event.wait() # A thread irá pausar aqui se o evento for 'cleared'

            try:
                hp = self.pm.read_int(HP_ADDRESS)
                max_hp = self.pm.read_int(MAX_HP_ADDRESS)
                
                if max_hp > 0:
                    current_hp_percent = (hp / max_hp)
                    self.status_callback(f"HP: {hp} / {max_hp} ({current_hp_percent:.0%})", "green")
                    if current_hp_percent < self.threshold:
                        print(f"HP baixo ({current_hp_percent:.0%}), usando poção na tecla '{self.use_key}'")
                        send_key(self.hwnd, self.use_key)
                        time.sleep(AUTOPOT_DELAY)
                else:
                    self.status_callback("HP: 0 / 0", "gray")
                
                time.sleep(AUTOPOT_CHECK_INTERVAL)
            except (pymem.exception.MemoryReadError, ZeroDivisionError):
                self.status_callback("Erro na leitura de HP", "red")
                time.sleep(1)
        print("Thread de AutoPot parada.")
        self.status_callback("HP: N/A", "gray")

    def stop(self):
        self.running.clear()

class AutoBuff(threading.Thread):
    def __init__(self, pm, hwnd, buffs_to_monitor, status_callback, resume_event):
        super().__init__(daemon=True)
        self.pm, self.hwnd = pm, hwnd
        self.buffs_to_monitor = buffs_to_monitor
        self.status_callback = status_callback
        self.running = threading.Event()
        self.resume_event = resume_event
        self.lock = threading.Lock()

    def get_active_buffs(self):
        try:
            buff_bytes = self.pm.read_bytes(BUFF_LIST_ADDRESS, BUFF_LIST_SIZE * 4)
            active_ids = struct.unpack(f'<{BUFF_LIST_SIZE}I', buff_bytes)
            return {buff_id for buff_id in active_ids if buff_id != 0}
        except (pymem.exception.MemoryReadError, struct.error):
            return set()

    def run(self):
        self.running.set()
        print("Thread de AutoBuff iniciada.")
        while self.running.is_set():
            self.resume_event.wait() # A thread irá pausar aqui se o evento for 'cleared'

            active_buff_ids = self.get_active_buffs()
            
            with self.lock:
                buffs_to_check = list(self.buffs_to_monitor)
            
            self.status_callback(f"Buffs ativos: {len(active_buff_ids)} | Monitorando: {len(buffs_to_check)}", "green")

            for buff in buffs_to_check:
                if not self.running.is_set(): break
                if buff['id'] not in active_buff_ids:
                    print(f"Buff '{buff['name']}' inativo. Usando skill na tecla '{buff['key']}'")
                    send_key(self.hwnd, buff['key'])
                    time.sleep(AUTBUFF_COOLDOWN)
            
            time.sleep(AUTBUFF_CHECK_INTERVAL)
        print("Thread de AutoBuff parada.")
        self.status_callback("Buffs: N/A", "gray")

    def stop(self):
        self.running.clear()

    def update_buffs(self, new_buffs_to_monitor):
        with self.lock:
            self.buffs_to_monitor = new_buffs_to_monitor
        print("Configuração de AutoBuff atualizada dinamicamente.")

class SkillSpam(threading.Thread):
    def __init__(self, hwnd, get_key_states_func, resume_event):
        super().__init__(daemon=True)
        self.hwnd = hwnd
        self.get_key_states = get_key_states_func
        self.running = threading.Event()
        self.resume_event = resume_event

        self.loop_active = {}
        self.loop_last_exec = {}
        self.last_toggle_press = {}

    def run(self):
        self.running.set()
        print("Thread de SkillSpam iniciada.")
        while self.running.is_set():
            self.resume_event.wait() # A thread irá pausar aqui se o evento for 'cleared'

            now = time.time()
            states = self.get_key_states()

            for key, config in states.items():
                mode = config['mode']
                interval = config['interval']
                is_pressed = keyboard.is_pressed(key)

                # --- MODO 3: LOOP COM TIMER (TOGGLE) ---
                if mode == 3:
                    if is_pressed and (now - self.last_toggle_press.get(key, 0) > LOOP_TOGGLE_DEBOUNCE):
                        self.loop_active[key] = not self.loop_active.get(key, False)
                        self.last_toggle_press[key] = now
                        
                        if self.loop_active[key]:
                            winsound.Beep(1200, 70)
                            self.loop_last_exec[key] = now
                        else:
                            winsound.Beep(800, 70)
                        
                        print(f"Loop da tecla '{key}' foi {'ATIVADO' if self.loop_active.get(key) else 'DESATIVADO'}.")

                    if self.loop_active.get(key, False) and (now - self.loop_last_exec.get(key, 0) > interval):
                        try:
                            send_key(self.hwnd, key)
                            self.loop_last_exec[key] = now
                        except Exception as e:
                            print(f"[ERRO] Falha no loop da tecla '{key}': {e}")

                # --- MODOS 1 E 2: SPAM AO MANTER PRESSIONADO ---
                elif mode > 0 and is_pressed:
                    try:
                        screen_pos = win32gui.GetCursorPos()
                        client_pos = win32gui.ScreenToClient(self.hwnd, screen_pos)
                        
                        send_key(self.hwnd, key)

                        pos1_x = client_pos[0] - FLICK_DISTANCE
                        pos1_y = client_pos[1] - FLICK_DISTANCE
                        lparam1 = win32api.MAKELONG(pos1_x, pos1_y)
                        send_message(self.hwnd, win32con.WM_MOUSEMOVE, 0, lparam1)
                        time.sleep(MOUSE_FLICK_SPEED)

                        if mode == 1:
                            send_click(self.hwnd, coords=(pos1_x, pos1_y))

                        pos2_x = client_pos[0] + FLICK_DISTANCE
                        pos2_y = client_pos[1] + FLICK_DISTANCE
                        lparam2 = win32api.MAKELONG(pos2_x, pos2_y)
                        send_message(self.hwnd, win32con.WM_MOUSEMOVE, 0, lparam2)
                        
                        time.sleep(SKILLSPAM_DELAY)
                    except Exception as e:
                        print(f"[ERRO] Falha no loop de spam/flick: {e}")
                        time.sleep(0.1)

            time.sleep(0.01)
    
    def stop(self):
        self.running.clear()
        self.loop_active.clear()
        self.loop_last_exec.clear()
        self.last_toggle_press.clear()
        print("Thread de SkillSpam parada.")

# --- INTERFACE GRÁFICA ---
class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.pm, self.hwnd, self.threads = None, None, {}
        self.is_running = False
        # --- LÓGICA DE PAUSA ALTERADA ---
        # Este evento controla se as threads devem rodar.
        # .set() permite que rodem, .clear() as pausa.
        self.resume_event = threading.Event()
        self.buff_icons = {}
        self.buff_widgets = []

        self.setup_styles()
        self.title("JPTools BETA_v3.7 by J O T T A") # Versão atualizada
        self.minsize(600, 750)
        self.configure(bg=self.colors['bg_main'])

        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=1)

        self.connect_to_process()
        
        if self.pm and self.hwnd:
            self.create_widgets()
            self.register_hotkeys()
            self.protocol("WM_DELETE_WINDOW", self.on_close)
            signal.signal(signal.SIGINT, self.signal_handler)
        else:
            self.destroy()

    def setup_styles(self):
        self.colors = {'bg_main': '#D7D7D7', 'bg_frame': '#D7D7D7', 'bg_light': '#D7D7D7', 'text': "#000000", 'accent': "#FFFFFF", 'green': '#4CAF50', 'red': '#F44336', 'gray': '#9E9E9E', 'orange': '#FF9800'}
        self.fonts = {'title': font.Font(family="Segoe UI", size=12, weight="bold"), 'body': font.Font(family="Segoe UI", size=10), 'small': font.Font(family="Segoe UI", size=9)}
        style = ttk.Style(self)
        style.theme_use('clam')
        style.configure("TNotebook", background=self.colors['bg_main'], borderwidth=0)
        style.configure("TNotebook.Tab", background=self.colors['bg_light'], foreground=self.colors['text'], padding=[10, 5], font=self.fonts['body'], borderwidth=0)
        style.map("TNotebook.Tab", background=[("selected", self.colors['accent'])])
        style.configure("TFrame", background=self.colors['bg_frame'])
        style.configure("TLabel", background=self.colors['bg_frame'], foreground=self.colors['text'], font=self.fonts['body'])
        style.configure("TLabelframe", background=self.colors['bg_frame'], bordercolor=self.colors['gray'], padding=10)
        style.configure("TLabelframe.Label", background=self.colors['bg_frame'], foreground=self.colors['text'], font=self.fonts['title'])
        style.configure("TEntry", fieldbackground=self.colors['bg_light'], foreground=self.colors['text'], bordercolor=self.colors['gray'], insertcolor=self.colors['text'])
        style.configure("TButton", background=self.colors['accent'], foreground="black", font=self.fonts['body'], padding=5)
        style.map("TButton", background=[('active', "#009E28")])
        style.configure("TCheckbutton", background=self.colors['bg_frame'], foreground=self.colors['text'], font=self.fonts['body'])
        style.map("TCheckbutton", background=[('active', self.colors['bg_frame'])])
        style.configure("TMenubutton", background=self.colors['bg_light'], foreground=self.colors['text'], font=self.fonts['body'], width=3)
        style.configure('Accent.TMenubutton', background=self.colors['accent'], foreground='black')
        style.map('Accent.TMenubutton', background=[('active', "#009E37")])

    def connect_to_process(self):
        try:
            self.pm = pymem.Pymem(PROCESS_NAME)
            self.hwnd = get_hwnd_from_pid(self.pm.process_id)
            if not self.hwnd: raise Exception("Janela visível do Ragnarok não encontrada.")
            messagebox.showinfo("Sucesso", f"Conectado ao processo '{PROCESS_NAME}' (PID: {self.pm.process_id})")
        except Exception as e:
            messagebox.showerror("Erro de Conexão", f"Não foi possível encontrar o processo '{PROCESS_NAME}'.\n\nCertifique-se de que o jogo está aberto.\n\nDetalhes: {e}")
            self.pm, self.hwnd = None, None

    def create_widgets(self):
        top_frame = ttk.Frame(self, style='TFrame')
        top_frame.grid(row=0, column=0, sticky='ew', padx=10, pady=(10, 5))
        top_frame.columnconfigure(1, weight=1)

        self.status_indicator = tk.Label(top_frame, text="PARADO", font=self.fonts['title'], bg=self.colors['red'], fg='white', padx=10, pady=5)
        self.status_indicator.grid(row=0, column=0, sticky='w')

        hotkey_frame = ttk.Frame(top_frame)
        hotkey_frame.grid(row=0, column=2, sticky='e')
        ttk.Label(hotkey_frame, text="Atalho Global:", style='TLabel').pack(side='left', padx=(0, 5))
        self.toggle_key_entry = ttk.Entry(hotkey_frame, width=8, font=self.fonts['body'])
        self.toggle_key_entry.insert(0, "F1")
        self.toggle_key_entry.pack(side='left')
        self.toggle_key_entry.bind("<FocusOut>", lambda e: self.register_hotkeys())

        self.notebook = ttk.Notebook(self)
        self.notebook.grid(row=1, column=0, sticky="nsew", padx=10, pady=5)
        
        self.page_autopot = ttk.Frame(self.notebook, style='TFrame', padding=15)
        self.page_autobuff = ttk.Frame(self.notebook, style='TFrame', padding=15)
        self.page_skillspam = ttk.Frame(self.notebook, style='TFrame', padding=15)
        
        self.notebook.add(self.page_autopot, text=' AutoPot ')
        self.notebook.add(self.page_autobuff, text=' AutoBuff ')
        self.notebook.add(self.page_skillspam, text=' SkillSpam ')
        
        self.create_autopot_page()
        self.create_autobuff_page()
        self.create_skillspam_page()

    def create_autopot_page(self):
        frame = self.page_autopot
        frame.columnconfigure(1, weight=1)
        ttk.Label(frame, text="AutoPot", font=self.fonts['title']).grid(row=0, column=0, columnspan=2, pady=(0, 20))
        ttk.Label(frame, text="Tecla da Poção:").grid(row=1, column=0, sticky='w', padx=5, pady=5)
        self.autopot_key_entry = ttk.Entry(frame, width=15, font=self.fonts['body'])
        self.autopot_key_entry.insert(0, "F2")
        self.autopot_key_entry.grid(row=1, column=1, sticky='ew', padx=5, pady=5)
        self.hp_threshold_var = tk.IntVar(value=80)
        self.hp_threshold_label = ttk.Label(frame, text=f"Usar se HP < {self.hp_threshold_var.get()}%")
        self.hp_threshold_label.grid(row=2, column=0, sticky='w', padx=5, pady=10)
        self.hp_threshold_slider = ttk.Scale(frame, from_=1, to=99, orient='horizontal', variable=self.hp_threshold_var, command=self.update_hp_label)
        self.hp_threshold_slider.grid(row=2, column=1, sticky='ew', padx=5, pady=10)
        status_frame = ttk.LabelFrame(frame, text="Diagnóstico", style="TLabelframe")
        status_frame.grid(row=3, column=0, columnspan=2, sticky='ew', pady=20)
        status_frame.columnconfigure(0, weight=1)
        self.hp_status_label = ttk.Label(status_frame, text="HP: N/A", font=self.fonts['body'])
        self.hp_status_label.pack(pady=5)
        
    def update_hp_label(self, value):
        self.hp_threshold_label.config(text=f"Usar se HP < {int(float(value))}%")
        
    def create_autobuff_page(self):
        frame = self.page_autobuff
        frame.rowconfigure(1, weight=1)
        frame.columnconfigure(0, weight=1)
        top_frame = ttk.Frame(frame)
        top_frame.grid(row=0, column=0, columnspan=2, sticky='ew', pady=(0, 10))
        ttk.Label(top_frame, text="Diagnóstico:", font=self.fonts['body']).pack(side='left')
        self.buff_status_label = ttk.Label(top_frame, text="Buffs: N/A", font=self.fonts['body'])
        self.buff_status_label.pack(side='left', padx=5)
        canvas = tk.Canvas(frame, bg=self.colors['bg_frame'], highlightthickness=0)
        scrollbar = ttk.Scrollbar(frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas, style='TFrame')
        scrollable_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        canvas.grid(row=1, column=0, sticky='nsew')
        scrollbar.grid(row=1, column=1, sticky='ns')
        scrollable_frame.columnconfigure(0, weight=1)
        self.buff_widgets.clear()
        current_row = 0
        for group_name, skills in BUFF_CONFIG.items():
            if not skills: continue
            group_frame = ttk.LabelFrame(scrollable_frame, text=group_name, style="TLabelframe")
            group_frame.grid(row=current_row, column=0, sticky='ew', padx=5, pady=5)
            current_row += 1
            max_cols = 6
            for i, skill_data in enumerate(skills):
                row, col = divmod(i, max_cols)
                skill_frame = ttk.Frame(group_frame, style='TFrame')
                skill_frame.grid(row=row, column=col, padx=8, pady=8, sticky='n')
                icon_label = ttk.Label(skill_frame, text="?")
                icon_label.pack()
                try:
                    icon_path = os.path.join(ICON_FOLDER, skill_data['icon'])
                    if icon_path not in self.buff_icons:
                        pil_img = Image.open(icon_path).resize((32, 32), Image.Resampling.LANCZOS)
                        self.buff_icons[icon_path] = ImageTk.PhotoImage(pil_img)
                    icon_label.config(image=self.buff_icons[icon_path])
                except Exception as e:
                    print(f"Não foi possível carregar o ícone: {skill_data['icon']} - {e}")
                ttk.Label(skill_frame, text=skill_data['name'], font=self.fonts['small']).pack(pady=(2,0))
                key_var = tk.StringVar(value=skill_data.get('key', ''))
                key_var.trace_add('write', self.on_buff_key_change)
                key_button = ttk.Button(skill_frame, textvariable=key_var, width=6)
                key_button.pack(pady=(2,0))
                key_button.configure(command=lambda var=key_var: self.open_key_capture_popup(var))
                self.buff_widgets.append({'id': skill_data['id'], 'name': skill_data['name'], 'key_var': key_var})

    def on_buff_key_change(self, *args):
        if self.is_running and 'autobuff' in self.threads and self.threads['autobuff'].is_alive():
            buff_config = self.get_buff_config_from_ui()
            self.threads['autobuff'].update_buffs(buff_config)

    def open_key_capture_popup(self, key_var):
        KeyCapturePopup(self, lambda new_key: key_var.set(new_key))

    def get_buff_config_from_ui(self):
        config = []
        for widget_set in self.buff_widgets:
            key = widget_set['key_var'].get().strip()
            if key:
                config.append({'id': widget_set['id'], 'name': widget_set['name'], 'key': key})
        return config

    def create_skillspam_page(self):
        frame = self.page_skillspam
        frame.columnconfigure(0, weight=1)
        ttk.Label(frame, text="SkillSpam", font=self.fonts['title']).grid(row=0, column=0, pady=(0, 10))
        info_text = "Selecione um modo para cada tecla.\nModo Loop: 1º toque liga, 2º toque desliga.\n(Requer execução como administrador)"
        ttk.Label(frame, text=info_text, justify='center').grid(row=1, column=0, pady=(0, 15))

        timer_frame = ttk.Frame(frame, style='TFrame')
        timer_frame.grid(row=2, column=0, pady=(0, 15))
        ttk.Label(timer_frame, text="Intervalo do Loop (s):", font=self.fonts['body']).pack(side='left', padx=(0, 5))
        self.skillspam_timer_var = tk.StringVar(value="0.5")
        timer_entry = ttk.Entry(timer_frame, textvariable=self.skillspam_timer_var, width=5, font=self.fonts['body'], justify='center')
        timer_entry.pack(side='left')

        self.key_states = {}
        key_frame = ttk.Frame(frame, style='TFrame')
        key_frame.grid(row=3, column=0, pady=5)
        keys_to_show = "1234567890QWERTYUIOPASDFGHJKLZXCVBNM"
        for i, key in enumerate(keys_to_show):
            row, col = divmod(i, 10)
            var = tk.IntVar(value=0)
            self.key_states[key.lower()] = var
            key_btn = ttk.Menubutton(key_frame, text=key, width=3, style='TMenubutton')
            key_btn.grid(row=row, column=col, padx=3, pady=3)
            menu = tk.Menu(key_btn, tearoff=False, bg=self.colors['bg_light'], fg=self.colors['text'])
            key_btn['menu'] = menu
            
            menu.add_radiobutton(label="Desativado", variable=var, value=0, command=lambda k=key_btn: k.config(style='TMenubutton'))
            menu.add_radiobutton(label="Spam Tecla+Clique", variable=var, value=1, command=lambda k=key_btn: k.config(style='Accent.TMenubutton'))
            menu.add_radiobutton(label="Spam Tecla", variable=var, value=2, command=lambda k=key_btn: k.config(style='Accent.TMenubutton'))
            menu.add_radiobutton(label="Loop com Timer", variable=var, value=3, command=lambda k=key_btn: k.config(style='Accent.TMenubutton'))

    def get_skillspam_states(self):
        states = {}
        try:
            interval = float(self.skillspam_timer_var.get())
        except (ValueError, tk.TclError):
            interval = 0.5
        
        for key, var in self.key_states.items():
            states[key] = {
                'mode': var.get(),
                'interval': interval
            }
        return states

    def on_toggle_all(self):
        if self.is_running: self.stop_all_threads()
        else: self.start_all_threads()

    def start_all_threads(self):
        if not self.pm or not self.hwnd:
            messagebox.showerror("Erro", "Não conectado ao processo do jogo.")
            return

        print("Ligando funções...")
        self.is_running = True
        self.resume_event.set() # Garante que as threads possam rodar ao iniciar
        self.update_pause_indicator(False)
        winsound.Beep(1000, 150)
        
        try:
            pot_key = self.autopot_key_entry.get()
            threshold = self.hp_threshold_var.get()
            self.threads['autopot'] = AutoPot(self.pm, self.hwnd, pot_key, threshold, self.update_hp_status, self.resume_event)
            self.threads['autopot'].start()
        except Exception as e: messagebox.showerror("Erro AutoPot", f"Não foi possível iniciar: {e}")

        try:
            buff_config = self.get_buff_config_from_ui()
            if buff_config:
                self.threads['autobuff'] = AutoBuff(self.pm, self.hwnd, buff_config, self.update_buff_status, self.resume_event)
                self.threads['autobuff'].start()
        except Exception as e: messagebox.showerror("Erro AutoBuff", f"Não foi possível iniciar: {e}")

        try:
            self.threads['skillspam'] = SkillSpam(self.hwnd, self.get_skillspam_states, self.resume_event)
            self.threads['skillspam'].start()
        except Exception as e: messagebox.showerror("Erro SkillSpam", f"Não foi possível iniciar: {e}")

        try:
            self.threads['monitor'] = GameMonitor(self.pm, self)
            self.threads['monitor'].start()
        except Exception as e: messagebox.showerror("Erro Monitor", f"Não foi possível iniciar o monitor do jogo: {e}")

    def stop_all_threads(self):
        print("Desligando funções...")
        self.is_running = False
        self.resume_event.set() # Libera qualquer thread que esteja em espera para que possa terminar
        self.status_indicator.config(text="PARADO", bg=self.colors['red'])
        winsound.Beep(600, 150)
        for thread in self.threads.values():
            if thread.is_alive(): thread.stop()
        self.threads.clear()
        self.update_hp_status("HP: N/A", "gray")
        self.update_buff_status("Buffs: N/A", "gray")

    # --- LÓGICA DE PAUSA ALTERADA ---
    def set_paused_state(self, should_be_paused):
        if not self.is_running: return
        
        if should_be_paused:
            if self.resume_event.is_set():
                self.resume_event.clear() # Pausa as threads
                self.after(0, self.update_pause_indicator, True)
        else:
            if not self.resume_event.is_set():
                self.resume_event.set() # Retoma as threads
                self.after(0, self.update_pause_indicator, False)

    def update_pause_indicator(self, is_paused):
        if not self.is_running: return
        if is_paused:
            self.status_indicator.config(text="PAUSADO (CHAT)", bg=self.colors['orange'])
        else:
            self.status_indicator.config(text="ATIVO", bg=self.colors['green'])

    def update_hp_status(self, text, color):
        self.hp_status_label.config(text=text, foreground=self.colors.get(color, 'white'))
        
    def update_buff_status(self, text, color):
        self.buff_status_label.config(text=text, foreground=self.colors.get(color, 'white'))

    def register_hotkeys(self):
        try: keyboard.remove_all_hotkeys() 
        except Exception: pass
        try:
            hotkey = self.toggle_key_entry.get()
            if hotkey:
                keyboard.add_hotkey(hotkey, self.on_toggle_all, suppress=True)
                print(f"Hotkey global '{hotkey}' registrada.")
        except Exception as e:
            messagebox.showerror("Erro de Hotkey", f"Não foi possível registrar a hotkey '{hotkey}'.\nTente usar outra tecla.\n\nDetalhes: {e}")
            
    def on_close(self):
        print("Fechando a aplicação...")
        self.stop_all_threads()
        self.destroy()

    def signal_handler(self, sig, frame):
        self.on_close()

if __name__ == "__main__":
    if not os.path.isdir(ICON_FOLDER):
        print(f"Aviso: A pasta '{ICON_FOLDER}' não foi encontrada. Os ícones dos buffs não serão exibidos.")
        try:
            os.makedirs(ICON_FOLDER, exist_ok=True)
            print(f"Pasta '{ICON_FOLDER}' criada. Por favor, adicione os arquivos de imagem .png nela.")
        except OSError as e:
            print(f"Erro ao criar a pasta de ícones: {e}")
            
    app = App()
    if app.pm and app.hwnd: 
        app.mainloop()
